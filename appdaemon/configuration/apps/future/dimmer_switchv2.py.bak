from appbase import AppBase


##############################################################################
# DimmerSwitch
#   - App to control hue dimmer switches, config:
#   - config:
#       On Button: Turn lights on full brightness
#       Brightness+ Button: Increase brightness by 10%, turn on if light is off
#       Brightness- Button: Decrease brightness by 10%, turn light off if <=0
#       Off Button: Turn lights off
#   - args:
#     entities:
#       lights: entity id of lights to control, comma separated
#       dimmer_switch: entity id of dimmer switch
##############################################################################


class DimmerSwitch(AppBase):
    def initialize(self) -> None:
        super().initialize()
        self.button_config = self.args['button_config']

        if 'dimmer_switch' in self.args:
            # take action when button is pressed on dimmer switch
            self.listen_event(self.button_pressed,
                              "deconz_event",
                              id=self.args['dimmer_switch'])

    def button_pressed(self, event_name: str, data: dict,
                       kwargs: dict) -> None:
        button_event = data['event']
        # 10xx: on, 20xx: brighten, 30xx: dim, 40xx: off
        # xx03: long press release, xx02: short press release

        if button_event in self.button_config:
            service_conf = self.button_config[button_event]
            service = service_conf['entity'].split(',')[0]

            if service == 'scene':
                self.turn_on(service_conf['entity'])
            else:
                self.call_service(
                    f"{service}/{service_conf['action']}",
                    entity_id=service_conf['entity'],
                    **service_conf['parameters']
                )
        else:
            self.log("Button not configured")
