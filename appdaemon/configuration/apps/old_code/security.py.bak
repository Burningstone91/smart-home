from enum import Enum
from typing import Union

from appbase import AppBase
from house_config import HOUSE, MODES


##############################################################################
# App to control security system
#
# ARGS:
# yaml args:
#
# entities:
#   motion: motion sensor that will trigger alarm if armed_motion, comma list
#   other_sensors: other sensors that trigger if armed_no_motion or
#                  armed_motion, comma list
#   alarm_lights: lights that will flash red when alert, comma list
#
##############################################################################


class SecurityAutomation(AppBase):
    class AlarmType(Enum):
        armed_no_motion = 'Scharf ohne Bewegung'
        armed_motion = 'Scharf mit Bewegung'
        disarmed = 'Ungesichert'
        alert = 'Einbrecher'

    def initialize(self):
        super().initialize()
        self.motion_handles = []
        self.other_security_handles = []
        self.alarm_lights = self.entities['alarm_lights'].split(',')
        self.motion_entities = self.entities.get('motion', '').split(',')
        self.other_security_entities = self.entities.get('other_security', '').split(',')

    def set_alarm_state(self, alarm_state: Enum) -> None:
        if alarm_state == self.AlarmType.alert:
            self.set_motion_sensor_listen(False)
            self.set_other_security_sensor_listen(False)

        elif alarm_state == self.AlarmType.armed_motion:
            self.set_motion_sensor_listen(True)
            self.set_other_security_sensor_listen(True)

        elif alarm_state == self.AlarmType.armed_no_motion:
            self.set_motion_sensor_listen(False)
            self.set_other_security_sensor_listen(True)

        elif alarm_state == self.AlarmType.disarmed:
            self.set_motion_sensor_listen(False)
            self.set_other_security_sensor_listen(False)

        self.set_alarm_input_select(alarm_state.value)

    def set_motion_sensor_listen(self, enable: bool) -> None:
        if 'motion' in self.entities:
            motion_entities = self.entities['motion'].split(',')

            if enable:
                for entity in motion_entities:
                    self.motion_handles.append(self.listen_state(self.sensor_triggered,
                                                                 entity))
                self.log("Bewegungssensoren eingeschaltet")
            else:
                for handle in self.motion_handles:
                    self.motion_handles.remove(handle)
                    self.cancel_listen_state(handle)
                self.log("Bewegungssensoren ausgeschaltet")

    def set_other_security_sensor_listen(self, enable: bool) -> None:
        if 'other_security' in self.entities:
            security_entities = self.entities['other_security'].split(',')

            if enable:
                for entity in security_entities:
                    self.other_security_handles.append(self.listen_state(self.sensor_triggered,
                                                                         entity))
                self.log("Andere Sicherheitssensoren eingeschaltet")
            else:
                for handle in self.other_security_handles:
                    self.other_security_handles.remove(handle)
                    self.cancel_listen_state(handle)
                self.log("Andere Sicherheitssensoren ausgeschaltet")

    def set_alarm_input_select(self, alarm_state: str) -> None:
        old_state = self.get_state(HOUSE['alarm_state'])
        if not alarm_state == old_state:
            self.select_option(HOUSE['alarm_state'], alarm_state)
            self.log("Alarm vorher: {}, Alarm jetzt: {}".format(old_state,
                                                                alarm_state))

    def sensor_triggered(self, entity: Union[str, dict], attribute: str,
                         old: str, new: str, kwargs: dict) -> None:
        self.set_alarm_state(self.AlarmType.alert)
#################test presence first############# if presence works, also change enabled presence for lights
################# need a way to cancel flash lights ####################################
        #if new == 'on' or new == 'offen':
        #    self.log("Lichter werden jetzt blinken!")
        #    for light in self.alarm_lights:
        #        self.turn_on(light, brightness=255, color_name='white')
        #        self.flash_lights(light)

    def flash_lights(self, light: str) -> None:
        self.toggle(light)
        if self.get_state(HOUSE['alarm_state']) == self.AlarmType.alert.value:
            self.run_in(self.flash_lights(light), 1)


class ArmOnDeparture(AppBase):
    def initialize(self):
        super().initialize()

        # arm when everyone is gone
        self.listen_state(self.noone_home,
                          HOUSE['presence_state'],
                          constrain_app_enabled=1)

    def noone_home(self, entity: Union[str, dict], attribute: str, old: str,
                   new: str, kwargs: dict) -> None:
        someone_home_states = [self.presence_app.HouseState.someone.value,
                               self.presence_app.HouseState.everyone.value]
        if (new not in someone_home_states) and (old in someone_home_states):
            self.security_app.set_alarm_state(
                self.security_app.AlarmType.armed_motion)
            self.log("Alle sind gegangen. Stelle Alarm scharf!")


class DisarmOnArrival(AppBase):
    def initialize(self):
        super().initialize()

        # disarm when someone arrives
        self.listen_state(self.someone_home,
                          HOUSE['presence_state'],
                          constrain_app_enabled=1)

    def someone_home(self, entity: Union[str, dict], attribute: str, 
                     old: str, new: str, kwargs: dict) -> None:
        someone_home_states = [self.presence_app.HouseState.someone.value,
                               self.presence_app.HouseState.everyone.value]
        if (new in someone_home_states) and (old not in someone_home_states):
            self.security_app.set_alarm_state(
                self.security_app.AlarmType.disarmed)
            self.log("Jemand ist jetzt zu Hause. Schalte Alarm aus!")


class ArmDisarmCleaning(AppBase):
    def initialize(self):
        super().initialize()

        # disarm when someone arrives
        self.listen_state(self.cleaning_mode_changed,
                          MODES['cleaning_mode'],
                          constrain_app_enabled=1)

    def cleaning_mode_changed(self, entity: Union[str, dict], attribute: str,
                              old: str, new: str, kwargs: dict) -> None:
        if new == 'on' and self.presence_app.noone_home():
                self.security_app.set_alarm_state(
                    self.security_app.AlarmType.armed_no_motion)
                self.log("Pedro putzt jetzt. Schalte Bewegungssensoren aus!")
        
        if new == 'off' and self.presence_app.noone_home():
            self.security_app.set_alarm_state(
                self.security_app.AlarmType.armed_motion)
            self.log("Pedro ist fertig. Schalte Bewegungssensoren wieder ein!")

    
class NotificationOnChange(AppBase):
    def initialize(self):
        super().initialize()

        # notify immediately when state of alarm system changes
        self.listen_state(self.alarm_state_changed,
                          HOUSE['alarm_state'],
                          constrain_app_enabled=1)

    def alarm_state_changed(self, entity: Union[str, dict], attribute: str,
                            old: str, new: str, kwargs: dict) -> None:
        self.notification_app.notify(
            'single',
            'emergency',
            "Alarm Status gewechselt",
            "Der neue Alarm Status ist {}".format(new),
            self.notifications['targets'])
